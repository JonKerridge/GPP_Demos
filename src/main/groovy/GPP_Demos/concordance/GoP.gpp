package GPP_Demos.concordance

import groovy_parallel_patterns.DataDetails
import groovy_parallel_patterns.ResultDetails
import groovy_parallel_patterns.connectors.spreaders.OneFanAny
import groovy_parallel_patterns.functionals.composites.AnyGroupOfPipelineCollects
import groovy_parallel_patterns.patterns.GroupOfPipelinesPattern
import groovy_parallel_patterns.terminals.Emit

import GPP_Demos.concordance.ConcordanceData as cd
import GPP_Demos.concordance.ConcordanceResults as cr


//usage runDemo concordance GoP resultFile title groups  doFileOutput

int groups
String title
int N = 8
int minSeqLen = 2
boolean doFileOutput
String workingDirectory = System.getProperty('user.dir')
String fileName
String outFileName

if (args.size() == 0){
  // assumed to be running form within Intellij
  groups = 4
  title = "bible"
  fileName = "./${title}.txt"
  outFileName = "./${title}GoP"
  doFileOutput = false
}
else {
  // assumed to be running via runDemo
  String folder = args[0]
  title = args[1]
  fileName = workingDirectory + "/src/main/groovy/GPP_Demos/${folder}/${title}.txt"
  outFileName = workingDirectory + "/src/main/groovy/GPP_Demos/${folder}/${title}GoP"
  groups = Integer.parseInt(args[2])
  doFileOutput = Boolean.parseBoolean(args[3])
}


def dDetails = new DataDetails( dName: cd.getName(),
    dInitMethod: cd.init,
    dInitData: [N, fileName, outFileName],
    dCreateMethod: cd.create,
    dCreateData: [null])

def rDetails = new ResultDetails( rName: cr.getName(),
    rInitMethod: cr.init,
    rInitData: [minSeqLen, doFileOutput],
    rCollectMethod: cr.collector,
    rFinaliseMethod: cr.finalise,
    rFinaliseData: [null])

System.gc()
print "GoP, $doFileOutput, $title, $groups, "

def startime = System.currentTimeMillis()

def gop = new GroupOfPipelinesPattern(
    stages: 3,
    rDetails: rDetails,
    eDetails: dDetails,
    stageOp: [cd.valueList, cd.indicesMap, cd.wordsMap],
    groups: groups)

def endtime = System.currentTimeMillis()
println " ${endtime - startime}"


