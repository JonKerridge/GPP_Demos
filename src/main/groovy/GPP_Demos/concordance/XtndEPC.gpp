package GPP_Demos.concordance

import groovy_parallel_patterns.DataDetails
import groovy_parallel_patterns.LocalDetails
import groovy_parallel_patterns.ResultDetails
import groovy_parallel_patterns.connectors.reducers.ListFanOne
import groovy_parallel_patterns.connectors.reducers.ListMergeOne
import groovy_parallel_patterns.connectors.spreaders.OneFanAny
import groovy_parallel_patterns.connectors.spreaders.OneFanList
import groovy_parallel_patterns.functionals.composites.AnyGroupOfPipelineCollects
import groovy_parallel_patterns.functionals.groups.ListGroupList
import groovy_parallel_patterns.functionals.pipelines.OnePipelineOne
import groovy_parallel_patterns.terminals.*
import groovy_parallel_patterns.functionals.transformers.CombineNto1

import GPP_Demos.concordance.ConcordanceWords as cw
import GPP_Demos.concordance.ConcordanceCombine as cc
import GPP_Demos.concordance.ConcordanceResults as cr
import GPP_Demos.concordance.ConcordanceData as cd

//usage runDemo concordance RunExtendedConcordance resultsFile title doFileOutput N blockWorkers blocksize

int blockWorkers
int blockSize
String title
int N
int minSeqLen = 2
boolean doFileOutput
String workingDirectory = System.getProperty('user.dir')
String fileName
String outFileName

if (args.size() == 0){
  // assumed to be running form within Intellij
  blockWorkers = 4
  blockSize = 64000
  title = "bible"
  fileName = "./${title}.txt"
  outFileName = "./${title}XtndEPC"
  N = 8
  doFileOutput = false
}
else {
  // assumed to be running via runDemo
  String folder = args[0]
  title = args[1]
  fileName = workingDirectory + "/src/main/groovy/GPP_Demos/${folder}/${title}.txt"
  outFileName = workingDirectory + "/src/main/groovy/GPP_Demos/${folder}/${title}Ext"
  doFileOutput = Boolean.parseBoolean(args[2])
  N = Integer.parseInt(args[3])
  blockWorkers = Integer.parseInt(args[4])
  blockSize = Integer.parseInt(args[5])
}

def dDetails = new DataDetails( dName: cw.getName(),
        dInitMethod: cw.init,
        dInitData: [fileName, blockSize],
        dCreateMethod: cw.create,
        dCreateData: [null])

def localData = new LocalDetails(lName: cc.getName(),
        lInitData: [N, outFileName],
        lInitMethod: cc.init,
        lFinaliseMethod: cc.finalise)

def outData = new LocalDetails( lName:cd.getName(),
        lInitMethod: cd.initLocal,
        lInitData: null,
        lCreateMethod: cd.create,
        lFinaliseMethod: cd.finalise)

def rDetails = new ResultDetails( rName: cr.getName(),
        rInitMethod: cr.init,
        rInitData: [minSeqLen, doFileOutput],
        rCollectMethod: cr.collector,
        rFinaliseMethod: cr.finalise,
        rFinaliseData: [null])

print "XtndEPC, $doFileOutput, $title, $N, $blockWorkers, $blockSize, "
System.gc()
def startime = System.currentTimeMillis()

def emit = new Emit (eDetails: dDetails)

def fos = new OneFanList()

def group = new ListGroupList(function: cw.processBuffer,
        workers: blockWorkers)

def fis = new ListMergeOne()

def combine = new CombineNto1(localDetails: localData,
        outDetails: outData,
        combineMethod: cc.appendBuff )

def emitInstances = new EmitFromInput( eDetails: outData)

def pipe = new OnePipelineOne(stages : 3,
    stageOp: [cd.valueList, cd.indicesMap, cd.wordsMap])

def collector = new Collect(rDetails: rDetails)

def endtime = System.currentTimeMillis()
println " ${endtime - startime} "

