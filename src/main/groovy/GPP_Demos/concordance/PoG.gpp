package GPP_Demos.concordance

import GPP_Demos.concordance.ConcordanceData as cd
import GPP_Demos.concordance.ConcordanceResults as cr
import GPP_Library.DataDetails
import GPP_Library.ResultDetails
import GPP_Library.patterns.PipelineOfGroupsPattern

//usage runDemo concordance PoG resultFile title workers doFileOutput

int workers
String title
int N = 8
int minSeqLen = 2
boolean doFileOutput
String workingDirectory = System.getProperty('user.dir')
String fileName
String outFileName

if (args.size() == 0) {
  // assumed to be running form within Intellij
  workers = 4
  title = "bible"
  fileName = "./${title}.txt"
  outFileName = "./${title}PoG"
  doFileOutput = false
} else {
  // assumed to be running via runDemo
  String folder = args[0]
  title = args[1]
  fileName = workingDirectory + "/src/main/groovy/GPP_Demos/${folder}/${title}.txt"
  outFileName = workingDirectory + "/src/main/groovy/GPP_Demos/${folder}/${title}PoG"
  workers = Integer.parseInt(args[2])
  doFileOutput = Boolean.parseBoolean(args[3])
}

def dDetails = new DataDetails(dName: cd.getName(),
    dInitMethod: cd.init,
    dInitData: [N, fileName, outFileName],
    dCreateMethod: cd.create,
    dCreateData: [null])

def rDetails = new ResultDetails(rName: cr.getName(),
    rInitMethod: cr.init,
    rInitData: [minSeqLen, doFileOutput],
    rCollectMethod: cr.collector,
    rFinaliseMethod: cr.finalise,
    rFinaliseData: [null])

List<ResultDetails> resultDetails = []

for (g in 0..<workers) resultDetails << rDetails

System.gc()
print "PoG, $doFileOutput, $title, $workers, "
def startime = System.currentTimeMillis()

def concordancePoG = new PipelineOfGroupsPattern(
    eDetails: dDetails,
    rDetails: rDetails,
    stages: 3,
    stageOp: [cd.valueList, cd.indicesMap, cd.wordsMap],
    workers: workers,
    stageModifier: null
)


def endtime = System.currentTimeMillis()
println " ${endtime - startime} "


