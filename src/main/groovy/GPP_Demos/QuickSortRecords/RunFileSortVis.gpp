package GPP_Demos.QuickSortRecords

import GPP_Demos.QuickSortIntegers.QSData
import GPP_Demos.QuickSortIntegers.QSWorker
import groovy_parallel_patterns.DataDetails
import groovy_parallel_patterns.LocalDetails
import groovy_parallel_patterns.ResultDetails
import groovy_parallel_patterns.connectors.reducers.N_WayMerge
import groovy_parallel_patterns.connectors.spreaders.OneFanList
import groovy_parallel_patterns.functionals.groups.ListThreePhaseWorkerList
import groovy_parallel_patterns.terminals.Collect
import groovy_parallel_patterns.terminals.Emit

//usage runDemo QuickSortRecords RunFileSort resultsFile workers inFile, outFile

/*
web sites for relevant information
http://sortbenchmark.org/  results from others
http://www.ordinal.com/gensort.html gensort download page
http://sortbenchmark.org/FAQ-2014.html basic description of sort benchmark
 */

def fileInPath = "D:\\QuickSortInputs\\"
def fileOutPath = "D:\\QuickSortOutputs\\"

int workers
String inFileName, outFileName
if (args.size() == 0) {
  workers = 2
  inFileName = fileInPath + "input64.txt"
  outFileName = fileOutPath + "output64.txt"
} else {
//    String folder = args[0] not used
  workers = Integer.parseInt(args[1])
  inFileName = fileInPath + args[2]
  outFileName = fileOutPath + args[3]
}

def eDetails = new DataDetails(
    dName: Record.getName(),
    dInitMethod: Record.initFile,
    dInitData: [inFileName],
    dCreateMethod: Record.createRecord
)

def rDetails = new ResultDetails(
    rName: ResultOutput.getName(),
    rInitMethod: ResultOutput.initialise,
    rInitData: [outFileName],
    rCollectMethod: ResultOutput.readRecord,
    rFinaliseMethod: ResultOutput.finalise
)

def workerDetails = new LocalDetails(
    lName: SortWorker.getName(),
    lInitMethod: SortWorker.init
)

long startTime = System.currentTimeMillis()

//@log 1 "./Sort-"

def emit = new Emit(
    eDetails: eDetails,
    logPhaseName: "emit",
    logPropertyName: "keyField"
)

def fan = new OneFanList()

def tpws = new ListThreePhaseWorkerList(
    inputMethod: SortWorker.inFunction,
    workMethod: SortWorker.workFunction,
    outFunction: SortWorker.outFunction,
    lDetails: workerDetails,
    workers: workers,
    logPhaseName: "work",
    inputLogPropertyName: "keyField",
    outputLogPropertyName: "keyField")

def merge = new N_WayMerge(
    mergeChoice: Record.mergeChoice,
    inClassName: Record.getName())

def collect = new Collect(
    rDetails: rDetails,
    logPhaseName: "collect",
    logPropertyName: "keyField"
)
long endTime = System.currentTimeMillis()
println "QuickSort, $workers, $inFileName, $outFileName,  ${endTime-startTime}"
