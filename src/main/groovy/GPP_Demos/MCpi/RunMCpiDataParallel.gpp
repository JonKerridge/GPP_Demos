package GPP_Demos.MCpi

import GPP_Demos.MCpi.MCpiData as piData
import GPP_Demos.MCpi.MCpiResults as piResults
import GPP_Library.DataDetails
import GPP_Library.ResultDetails
import GPP_Library.patterns.DataParallelPattern

//usage runDemo MCpi RunMCpiDataParallel resultsFile workers instances iterations

int workers
int instances
int iterations

if (args.size() == 0) {
  workers = 4
  instances = 1024
  iterations = 100000
} else {
//    String folder = args[0] not required
  workers = Integer.parseInt(args[1])
  instances = Integer.parseInt(args[2])
  iterations = Integer.parseInt(args[3])
}

System.gc()
print "MCpi Data Parallel, $workers, $instances, $iterations, "
def startime = System.currentTimeMillis()


def emitData = new DataDetails(
    dName: piData.getName(),
    dInitMethod: piData.init,
    dInitData: [instances],
    dCreateMethod: piData.create,
    dCreateData: [iterations])

def resultDetails = new ResultDetails(
    rName: piResults.getName(),
    rInitMethod: piResults.init,
    rCollectMethod: piResults.collector,
    rFinaliseMethod: piResults.finalise)

def piFarm = new DataParallelPattern(
    eDetails: emitData,
    rDetails: resultDetails,
    workers: workers,
    function: piData.withinOp)


def endtime = System.currentTimeMillis()
println "${endtime - startime} "
