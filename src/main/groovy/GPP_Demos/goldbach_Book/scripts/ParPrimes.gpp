package GPP_Demos.goldbach_Book.scripts

import GPP_Demos.goldbach_Book.data.PrimeListCollect
import groovy_parallel_patterns.DataDetails
import groovy_parallel_patterns.GroupDetails
import groovy_parallel_patterns.LocalDetails
import groovy_parallel_patterns.ResultDetails
import groovy_parallel_patterns.connectors.reducers.ListMergeOne
import groovy_parallel_patterns.connectors.spreaders.OneSeqCastList
import groovy_parallel_patterns.functionals.groups.ListGroupList
import groovy_parallel_patterns.functionals.transformers.CombineNto1
import groovy_parallel_patterns.terminals.Collect
import groovy_parallel_patterns.terminals.EmitWithLocal
import groovy_parallel_patterns.terminals.TestPoint
import GPP_Demos.goldbach_Book.data.Prime
import GPP_Demos.goldbach_Book.data.PrimeGenerator
import GPP_Demos.goldbach_Book.data.PartitionedSieve as ps
import GPP_Demos.goldbach_Book.data.CombinePartitionedSieves as cps
import GPP_Demos.goldbach_Book.data.PrimeList

//usage runDemo goldbach_Book/scripts ParPrimes resultsFile scale primeWorkers

int scale
int primeWorkers

if (args.size() == 0){
  // assumed to be running form within Intellij
  scale = 16
  primeWorkers = 2
}
else {
  // assumed to be running via runDemo
  // working directory folder assumed to be in args[0]
  scale = Integer.parseInt(args[1])
  primeWorkers = Integer.parseInt(args[2])
}

int k = 1024
int maxPrime = scale * k

assert (maxPrime % primeWorkers == 0):
  "primeWorkers ($primeWorkers) MUST divide maxPrime ($maxPrime) exactly"

def eDetails = new DataDetails(
    dName: Prime.getName(),
    dInitMethod: Prime.init,
    dCreateMethod: Prime.getPrime,
    lName: PrimeGenerator.getName(),
    lInitMethod: PrimeGenerator.init,
    lInitData: [maxPrime]
)

List groupInitialData = []
int partitionSize = maxPrime / primeWorkers
int offset = 0
for (i in 0 ..< primeWorkers){
  groupInitialData << [maxPrime, offset, partitionSize]
  offset = offset + partitionSize
}

List < LocalDetails > primeGroupDetails = []

for ( i in 0..< primeWorkers){
  primeGroupDetails << new LocalDetails(
      lName: ps.getName(),
      lInitMethod: ps.init,
      lInitData: groupInitialData[i],
      lFinaliseMethod: ps.finalise
  )
}
GroupDetails gDetails = new GroupDetails(
    workers: primeWorkers,
    groupDetails: primeGroupDetails
)

def combineDetails = new LocalDetails(
    lName: cps.getName(),
    lInitMethod: cps.init,
)

def combineOutput = new LocalDetails(
    lName: PrimeList.getName(),
    lInitMethod: PrimeList.initPrimeList,
    lFinaliseMethod: PrimeList.createPrimeList
)

def rDetails = new ResultDetails(
    rName: PrimeListCollect.getName(),
    rInitMethod: PrimeListCollect.init,
    rCollectMethod: PrimeListCollect.collector,
    rFinaliseMethod: PrimeListCollect.finalise
)

long startTime = System.currentTimeMillis()

def emitter = new EmitWithLocal(
    eDetails: eDetails
)

def spread = new OneSeqCastList()

def primeGroup = new ListGroupList(
    workers: primeWorkers,
    gDetails: gDetails,
    function: Prime.addPrime,
    outData: false
)

def merger = new ListMergeOne()

def combiner = new CombineNto1(
    localDetails: combineDetails,
    outDetails: combineOutput,
    combineMethod: cps.combineMethod
)

def collector = new Collect(
    rDetails: rDetails
)

long endTime = System.currentTimeMillis()
println "ParPrimes, $maxPrime, $primeWorkers, ${endTime - startTime}"

