package GPP_Demos.goldbach_Paper.scripts

import groovy_parallel_patterns.DataDetails
import groovy_parallel_patterns.GroupDetails
import groovy_parallel_patterns.LocalDetails
import groovy_parallel_patterns.ResultDetails
import groovy_parallel_patterns.connectors.reducers.ListSeqOne
import groovy_parallel_patterns.connectors.spreaders.OneParCastList
import groovy_parallel_patterns.functionals.groups.ListGroupList
import groovy_parallel_patterns.terminals.Collect
import groovy_parallel_patterns.terminals.EmitWithLocal
import groovy_parallel_patterns.functionals.workers.ThreePhaseWorker
import GPP_Demos.goldbach_Paper.data.Prime as p
import GPP_Demos.goldbach_Paper.data.ResultantPrimes as rp
import GPP_Demos.goldbach_Paper.data.Sieve as s
import GPP_Demos.goldbach_Paper.data.CollectedPrimes as cp
import GPP_Demos.goldbach_Paper.data.GoldbachRange as gr
import GPP_Demos.goldbach_Paper.data.GoldbachParCollect as gpc

//usage runDemo goldbach_Paper/scripts RunParGoldbach resultsFile maxN gWorkers

int maxN
int gWorkers 	// number of Goldbach workers

if (args.size() == 0){
    // assumed to be running form within Intellij
    maxN = 20000
    gWorkers = 4
}
else {
    // assumed to be running via runDemo
    // working directory folder assumed to be in args[0]
    maxN = Integer.parseInt(args[1])
    gWorkers = Integer.parseInt(args[2])
}


System.gc()
print "ParGB, $maxN, $gWorkers, "
def startime = System.currentTimeMillis()

int N = maxN 

int filter = Math.sqrt(maxN) + 1
def primeInitData = [N, 1, N]

def eDetails = new DataDetails( dName:  p.getName(),
                dInitMethod: p.init,
                dCreateMethod: p.create,
                lName: s.getName(),
                lInitMethod: s.init,
                lInitData: [filter])

def workerLocal = new LocalDetails(lName: cp.getName(),
                         lInitMethod: cp.init,
                         lInitData: primeInitData )


def gDetails = new GroupDetails(workers: gWorkers,
                 groupDetails: new LocalDetails [gWorkers])

for (w in 0 ..< gWorkers) {
  gDetails.groupDetails[w] = new LocalDetails(lName: gr.getName(),
                         lInitMethod: gr.init,
                         lFinaliseMethod: gr.finalise)
  gDetails.groupDetails[w].lInitData = [w]
}

def resDetails = new ResultDetails(rName: gpc.getName(),
                 rInitMethod:gpc.init,
                 rCollectMethod: gpc.collector,
                 rFinaliseMethod: gpc.finalise)



def emitter = new EmitWithLocal(eDetails: eDetails)

def worker = new ThreePhaseWorker( lDetails: workerLocal,
                                   inputMethod: cp.inputMethod, 
                                   workMethod: cp.workMethod,
                                   outFunction: cp.outFunction)

def spread = new OneParCastList()

def modifiers = []
for ( w in 0..<gWorkers) modifiers << [gWorkers]

def group = new ListGroupList ( gDetails: gDetails,
                 workers: gWorkers,
                 modifier:modifiers,
                 outData: false,
                 function: rp.getRange)

def reduce = new ListSeqOne ( )

def collector = new Collect (rDetails: resDetails)


def endtime = System.currentTimeMillis()
println " ${endtime - startime}"
